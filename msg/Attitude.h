// Generated by gencpp from file zigbee/Attitude.msg
// DO NOT EDIT!


#ifndef ZIGBEE_MESSAGE_ATTITUDE_H
#define ZIGBEE_MESSAGE_ATTITUDE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace zigbee
{
template <class ContainerAllocator>
struct Attitude_
{
  typedef Attitude_<ContainerAllocator> Type;

  Attitude_()
    : ID(0)
    , q0(0.0)
    , q1(0.0)
    , q2(0.0)
    , q3(0.0)  {
    }
  Attitude_(const ContainerAllocator& _alloc)
    : ID(0)
    , q0(0.0)
    , q1(0.0)
    , q2(0.0)
    , q3(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _ID_type;
  _ID_type ID;

   typedef float _q0_type;
  _q0_type q0;

   typedef float _q1_type;
  _q1_type q1;

   typedef float _q2_type;
  _q2_type q2;

   typedef float _q3_type;
  _q3_type q3;




  typedef boost::shared_ptr< ::zigbee::Attitude_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::zigbee::Attitude_<ContainerAllocator> const> ConstPtr;

}; // struct Attitude_

typedef ::zigbee::Attitude_<std::allocator<void> > Attitude;

typedef boost::shared_ptr< ::zigbee::Attitude > AttitudePtr;
typedef boost::shared_ptr< ::zigbee::Attitude const> AttitudeConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::zigbee::Attitude_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::zigbee::Attitude_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace zigbee

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'zigbee': ['/home/twei/catkin_ws/src/zigbee/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::zigbee::Attitude_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::zigbee::Attitude_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::zigbee::Attitude_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::zigbee::Attitude_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::zigbee::Attitude_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::zigbee::Attitude_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::zigbee::Attitude_<ContainerAllocator> >
{
  static const char* value()
  {
    return "34f7d0a01341c07639f0357f4a639ba8";
  }

  static const char* value(const ::zigbee::Attitude_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x34f7d0a01341c076ULL;
  static const uint64_t static_value2 = 0x39f0357f4a639ba8ULL;
};

template<class ContainerAllocator>
struct DataType< ::zigbee::Attitude_<ContainerAllocator> >
{
  static const char* value()
  {
    return "zigbee/Attitude";
  }

  static const char* value(const ::zigbee::Attitude_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::zigbee::Attitude_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 ID\n\
\n\
float32 q0\n\
float32 q1\n\
float32 q2\n\
float32 q3\n\
";
  }

  static const char* value(const ::zigbee::Attitude_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::zigbee::Attitude_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ID);
      stream.next(m.q0);
      stream.next(m.q1);
      stream.next(m.q2);
      stream.next(m.q3);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Attitude_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::zigbee::Attitude_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::zigbee::Attitude_<ContainerAllocator>& v)
  {
    s << indent << "ID: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ID);
    s << indent << "q0: ";
    Printer<float>::stream(s, indent + "  ", v.q0);
    s << indent << "q1: ";
    Printer<float>::stream(s, indent + "  ", v.q1);
    s << indent << "q2: ";
    Printer<float>::stream(s, indent + "  ", v.q2);
    s << indent << "q3: ";
    Printer<float>::stream(s, indent + "  ", v.q3);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ZIGBEE_MESSAGE_ATTITUDE_H
